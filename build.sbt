lazy val commonSettings = Seq(
  organization := "edu.xjtu.cs",
  version := "0.1",
  scalaVersion := "2.11.12",
  sparkVersion := "2.4.5",
  spName := "cs/qshield"
)

lazy val root = (project in file(".")).aggregate(opaqueExt, dataOwner).settings(
    commonSettings,
    name := "qshield"
  )

lazy val opaqueExt = (project in file("opaque-ext")).dependsOn(dataOwner).settings(
    commonSettings,
    name := "opaque-ext"
  )

lazy val dataOwner = (project in file("data-owner")).settings(
    commonSettings,
    name := "data-owner"
  )

val restApisGenRunableScriptTask = TaskKey[File]("restApisGenRunableScript",
  "Generate a runable script to start restful api server for qshield.")

baseDirectory in restApisGenRunableScriptTask := (baseDirectory in ThisBuild).value

compile in Compile := { (compile in Compile).dependsOn(restApisGenRunableScriptTask).value }

val cleanRestApisTask = TaskKey[Unit]("cleanRestApis",
  "clean files generated by restApisGenRunableScriptTask.")

clean := { clean.dependsOn(cleanRestApisTask).value }

restApisGenRunableScriptTask := {
  val bootstrapScriptTarget = baseDirectory.value / "qshield"
  if (!bootstrapScriptTarget.exists){
    import sys.process._
    val restApisSourceDir = baseDirectory.value / "rest-apis"
    val bootstrapScript = restApisSourceDir / "dist" / "app"
    if(!bootstrapScript.exists){
      val pyInstallerResult = Process(Seq("pyinstaller", "-F", "app.spec"), restApisSourceDir).!
      if (pyInstallerResult != 0) sys.error("Generate runable restful api bootstrap failed.")
    }
    // IO.copyFile(bootstrapScript, bootstrapScriptTarget)
    val bootstrapScriptTargetCreated = Process(Seq("ln", "-s", s"$bootstrapScript", s"$bootstrapScriptTarget"), restApisSourceDir).!
    if (bootstrapScriptTargetCreated != 0) sys.error("Generate runable qshield link file failed.")
  }
  bootstrapScriptTarget
}

cleanRestApisTask := {
  val bootstrapScriptBuildDir = baseDirectory.value / "rest-apis" / "build"
  val bootstrapScriptDistDir = baseDirectory.value / "rest-apis" / "dist"
  if (restApisGenRunableScriptTask.value.exists) IO.delete(restApisGenRunableScriptTask.value)
  if (bootstrapScriptBuildDir.exists) IO.delete(bootstrapScriptBuildDir)
  if (bootstrapScriptDistDir.exists) IO.delete(bootstrapScriptDistDir)
}
