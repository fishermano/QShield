#include "QSP.h"

#include "QServiceProvider.h"
#include "ServiceProvider.h"

/**
 * Throw a Java exception with the specified message.
 *
 * Important: Note that this function will return to the caller. The exception is only thrown at the
 * end of the JNI method invocation.
 */
extern void jni_throw(JNIEnv *env, const char *message);

JNIEXPORT void JNICALL Java_edu_xjtu_cs_cyx_qshield_owner_SP_QInit
  (JNIEnv *env, jobject obj, jbyteArray shared_key, jstring param, jint count, jstring intel_cert){
  (void)env;
  (void)obj;

  jboolean if_copy = false;
  jbyte *shared_key_bytes = env->GetByteArrayElements(shared_key, &if_copy);

  const char *intel_cert_str = env->GetStringUTFChars(intel_cert, nullptr);
  size_t intel_cert_len = static_cast<size_t>(env->GetStringUTFLength(intel_cert));

  const char *param_str = env->GetStringUTFChars(param, nullptr);


  try {
    const char *private_key_path = std::getenv("PRIVATE_KEY_PATH");
    if (!private_key_path) {
      throw std::runtime_error(
        "Set $PRIVATE_KEY_PATH to the file generated by "
        "openssl ecparam -genkey, probably called ${OPAQUE_HOME}/private_key.pem.");
    }
    qservice_provider.load_private_key(private_key_path);
    qservice_provider.set_shared_key(reinterpret_cast<uint8_t *>(shared_key_bytes));
    // qservice_provider.setup(param_str, count);
    qservice_provider.connect_to_ias(std::string(intel_cert_str, intel_cert_len));
  } catch (const std::runtime_error &e) {
    jni_throw(env, e.what());
  }

  env->ReleaseByteArrayElements(shared_key, shared_key_bytes, 0);
  env->ReleaseStringUTFChars(intel_cert, intel_cert_str);
}

JNIEXPORT void JNICALL Java_edu_xjtu_cs_cyx_qshield_owner_SP_QSPProcMsg0(
  JNIEnv *env, jobject obj, jbyteArray msg0_input) {
  (void)obj;

  jboolean if_copy = false;
  jbyte *msg0_bytes = env->GetByteArrayElements(msg0_input, &if_copy);
  uint32_t *extended_epid_group_id = reinterpret_cast<uint32_t *>(msg0_bytes);

  try {
    qservice_provider.process_msg0(*extended_epid_group_id);
  } catch (const std::runtime_error &e) {
    jni_throw(env, e.what());
  }

  env->ReleaseByteArrayElements(msg0_input, msg0_bytes, 0);
}

JNIEXPORT jbyteArray JNICALL Java_edu_xjtu_cs_cyx_qshield_owner_SP_QSPProcMsg1(
  JNIEnv *env, jobject obj, jbyteArray msg1_input) {
  (void)obj;

  jboolean if_copy = false;
  jbyte *msg1_bytes = env->GetByteArrayElements(msg1_input, &if_copy);
  sgx_ra_msg1_t *msg1 = reinterpret_cast<sgx_ra_msg1_t *>(msg1_bytes);

  uint32_t msg2_size = 0;
  std::unique_ptr<sgx_ra_msg2_t> msg2;
  try {
    msg2 = qservice_provider.process_msg1(msg1, &msg2_size);
  } catch (const std::runtime_error &e) {
    jni_throw(env, e.what());
  }

  jbyteArray array_ret = env->NewByteArray(msg2_size);
  env->SetByteArrayRegion(array_ret, 0, msg2_size, reinterpret_cast<jbyte *>(msg2.get()));

  env->ReleaseByteArrayElements(msg1_input, msg1_bytes, 0);

  return array_ret;
}

JNIEXPORT jbyteArray JNICALL Java_edu_xjtu_cs_cyx_qshield_owner_SP_QSPProcMsg3(
  JNIEnv *env, jobject obj, jbyteArray msg3_input) {
  (void)obj;

  jboolean if_copy = false;
  jbyte *msg3_bytes = env->GetByteArrayElements(msg3_input, &if_copy);
  sgx_ra_msg3_t *msg3 = reinterpret_cast<sgx_ra_msg3_t *>(msg3_bytes);
  uint32_t msg3_size = static_cast<uint32_t>(env->GetArrayLength(msg3_input));

  uint32_t msg4_size = 0;
  std::unique_ptr<ra_msg4_t> msg4;
  try {
    msg4 = qservice_provider.process_msg3(msg3, msg3_size, &msg4_size);
  } catch (const std::runtime_error &e) {
    jni_throw(env, e.what());
  }

  jbyteArray ret = env->NewByteArray(msg4_size);
  env->SetByteArrayRegion(ret, 0, msg4_size, reinterpret_cast<jbyte *>(msg4.get()));

  env->ReleaseByteArrayElements(msg3_input, msg3_bytes, 0);

  return ret;
}
